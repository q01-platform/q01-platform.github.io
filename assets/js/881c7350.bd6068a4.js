"use strict";(self.webpackChunkq_01_docs=self.webpackChunkq_01_docs||[]).push([[7936],{5736:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var n=t(7624),r=t(2172);const i=t.p+"assets/images/coreapi-diagram-1abf4f95c04777a080715eb44efc32e8.png",a=t.p+"assets/images/coreapi-diagram2-2813e150a6d89cd845e7a2d8084cefbc.png",s={sidebar_position:5,id:"map-core-api-core-components",title:"Core Components - Service, Query e Write api",sidebar_label:"Core Components"},c="Core Components - Service, Query e Write api",p={id:"products/map.q01.io/core-api/core-components/map-core-api-core-components",title:"Core Components - Service, Query e Write api",description:"Core Components - Service, Query e Write api",source:"@site/docs/products/map.q01.io/core-api/core-components/index.md",sourceDirName:"products/map.q01.io/core-api/core-components",slug:"/products/map.q01.io/core-api/core-components/",permalink:"/docs/products/map.q01.io/core-api/core-components/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,id:"map-core-api-core-components",title:"Core Components - Service, Query e Write api",sidebar_label:"Core Components"},sidebar:"mapSidebar",previous:{title:"Authentication",permalink:"/docs/products/map.q01.io/core-api/map-core-api-authentication"},next:{title:"Validation Rules",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-validation-rules"}},d={},m=[{value:"Introduction",id:"introduction",level:2}];function l(e){const o={em:"em",h1:"h1",h2:"h2",p:"p",...(0,r.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"core-components---service-query-e-write-api",children:"Core Components - Service, Query e Write api"}),"\n",(0,n.jsx)(o.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(o.p,{children:"Below, we analyze the functionalities of the main Core Components (Core Service, Core Write, and Core Query)."}),"\n",(0,n.jsx)(o.p,{children:"The CoreService currently only handles routing to the Core Write or Core Query APIs. It does not implement any business logic but dynamically provides all routes for standard CRUD management regarding the entities present in the database."}),"\n",(0,n.jsx)(o.p,{children:"On the other hand, CoreWrite and CoreQuery handle the more complex parts of the call flow, namely:"}),"\n",(0,n.jsx)(o.p,{children:"Verify that the calls have a valid Bearer Token.\nCheck the grants for the requested operation (can the user read/write data on the table?).\nValidate the parameters sent in the query or body (based on the type of call: GET, POST, PUT, or DELETE).\nEnsure consistency between the sent source* and the DIM.\nBelow are two diagrams illustrating the routing process of the CoreService and the Request/Response flow of the Core APIs."}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.em,{children:"Schema routing - CoreServiceApi Component"})}),"\n",(0,n.jsx)("img",{src:i}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.em,{children:"Validation schema - CoreQueryApi/CoreWriteApi Components"})}),"\n",(0,n.jsx)("img",{src:a})]})}function u(e={}){const{wrapper:o}={...(0,r.M)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},2172:(e,o,t)=>{t.d(o,{I:()=>s,M:()=>a});var n=t(1504);const r={},i=n.createContext(r);function a(e){const o=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:o},e.children)}}}]);