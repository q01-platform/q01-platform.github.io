"use strict";(self.webpackChunkq_01_docs=self.webpackChunkq_01_docs||[]).push([[9678],{8538:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var n=i(7624),s=i(2172);const r=i.p+"assets/images/validation-rule-f7dc038cbbe931eb8540b19e5171d05e.png",a={sidebar_position:1,id:"map-core-api-core-components-validation-rules",title:"Validation Rules",sidebar_label:"Validation Rules"},o="Validation Rules",d={id:"products/map.q01.io/core-api/core-components/map-core-api-core-components-validation-rules",title:"Validation Rules",description:"Validation Rules",source:"@site/docs/products/map.q01.io/core-api/core-components/validation-rules.md",sourceDirName:"products/map.q01.io/core-api/core-components",slug:"/products/map.q01.io/core-api/core-components/map-core-api-core-components-validation-rules",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-validation-rules",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"map-core-api-core-components-validation-rules",title:"Validation Rules",sidebar_label:"Validation Rules"},sidebar:"mapSidebar",previous:{title:"Core Components",permalink:"/docs/products/map.q01.io/core-api/core-components/"},next:{title:"HTTP Request and Error Handling",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-http-request-composition"}},c={},l=[{value:"Authentication Middleware",id:"authentication-middleware",level:2},{value:"Request Validator Middleware",id:"request-validator-middleware",level:2},{value:"Source",id:"source",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,n.jsx)(t.p,{children:"All calls forwarded by the core service to the core write/query APIs must be validated. As soon as the call is taken over by the service, before instantiating the associated Controller for the route, a chain of validations (middlewares) is triggered, as shown in the figure."}),"\n",(0,n.jsx)("img",{src:r}),"\n",(0,n.jsx)(t.p,{children:"The implemented middlewares are multiple. In the previous image, we see the two main ones, which are respectively the TokenValidator and the RequestValidator. The TokenValidator verifies the validity of the token, while the RequestValidator ensures that the arguments sent to the core APIs are correctly populated."}),"\n",(0,n.jsx)(t.h2,{id:"authentication-middleware",children:"Authentication Middleware"}),"\n",(0,n.jsx)(t.p,{children:"The TokenValidator middleware performs a validity check on the token contained in the header of API calls. The first check is of a formal nature; the JWT token is parsed, and the system returns an error in case of tampered token. The second check is performed to ensure that the token is still valid or, at most, if its expiration can be renewed."}),"\n",(0,n.jsxs)(t.p,{children:["If the token is valid, a sessionId is obtained (see ",(0,n.jsx)(t.a,{href:"../map-core-api-authentication",children:"Authentication"})," page) through which it is possible to read all the information stored in the TB_ANAG_SESSIONS00 table. Among the main pieces of information are the database connections of the originating microservice (see ",(0,n.jsx)(t.a,{href:"../map-core-api-database-access",children:"Database Access"})," page)."]}),"\n",(0,n.jsx)(t.h2,{id:"request-validator-middleware",children:"Request Validator Middleware"}),"\n",(0,n.jsx)(t.p,{children:"The validation on incoming requests varies depending on the type of call (method, route ID, etc.) and the invoked endpoint. Essentially, the validations are based on the structure of the metadata linked to the dimension (COD_DIM) being queried through the API. The metadata provides information regarding the nature of the data and their mandatory nature, and it also indicates the context (COD_ON_OFF) in which they are applicable."}),"\n",(0,n.jsx)(t.p,{children:"Therefore, we can validate the data sent for:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Type:"})}),"\n",(0,n.jsx)(t.p,{children:"Based on the TIPO_CAMPO, the system expects a number, a string, or a boolean. Here are some examples (field type expected value):"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"text|100: string"}),"\n",(0,n.jsx)(t.li,{children:"price: decimal"}),"\n",(0,n.jsx)(t.li,{children:"check: integer"}),"\n",(0,n.jsx)(t.li,{children:"radio|yes|no: integer (0 or 1)"}),"\n",(0,n.jsx)(t.li,{children:"DATE: valid date in the format yyyymmdd"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Special attention is given to fields of type AC or VARS, which are foreign keys to other entities. In this case, the validity check is not only based on the type but also verifies that the inserted code exists in the external table, to avoid generating orphaned links."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Visibility/Context:"})}),"\n",(0,n.jsx)(t.p,{children:"The COD_ON_OFF provides the context of validity, for example:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:'COD_ON_OFF = "D,L": It\'s not possible to send the column as a parameter in the request body for creating a new record.'}),"\n",(0,n.jsx)(t.li,{children:'COD_ON_OFF = "D,N,L,R": It\'s not possible to modify the value of the column by passing the field in the body of the modification request.'}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"User Weight:"})}),"\n",(0,n.jsx)(t.p,{children:"The COD_UTENTE field provides information on the accessibility of the constant/variable by the user. Each user has an associated profile, and each profile has a weight (numeric from 0 to 100). For example:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:'COD_UTENTE = "*": The field is always accessible regardless of the user profile\'s weight value.'}),"\n",(0,n.jsx)(t.li,{children:'COD_UTENTE = "90": The field will only be visible to users with a weight >= 90.'}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Empty Values:"})}),"\n",(0,n.jsx)(t.p,{children:'The CHECK_CAMPO field defines whether the column is mandatory or not. In the case of CHECK_CAMPO = "not null", the system verifies that in the case of insertion or modification, the sent value is not empty.'}),"\n",(0,n.jsx)(t.p,{children:'In addition to the validations described above, the system checks that each call always has a parameter called "source," and its value is in line with the type of call made. In the following paragraph, the "source" is explained, along with how it is generated and how the validation criterion works.'}),"\n",(0,n.jsx)(t.h2,{id:"source",children:"Source"}),"\n",(0,n.jsx)(t.p,{children:'Every API call must have the "source" key correctly populated as an argument (query params or body content).'}),"\n",(0,n.jsx)(t.p,{children:'What is the "source"? And how is it obtained?'}),"\n",(0,n.jsx)(t.p,{children:"When a microservice is created, it has its own database consisting of two schemas: metadata and data. In the metadata schema, all entities (DIM) and attributes (COST, VAR) that characterize the microservice are defined. Additionally, menu items to be imported into the reference app related to the microservice being developed are also defined."}),"\n",(0,n.jsx)(t.p,{children:"Let's take an excerpt from the TB_MENU table of the msscorecards microservice as an example."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"COD_MENU"}),(0,n.jsx)(t.th,{children:"DESCRIOPTION"}),(0,n.jsx)(t.th,{children:"FRONTEND ROUTE"}),(0,n.jsx)(t.th,{children:"COD_DIM"}),(0,n.jsx)(t.th,{children:"ENDPOINTS"}),(0,n.jsx)(t.th,{children:"NLEFT"}),(0,n.jsx)(t.th,{children:"NRIGHT"}),(0,n.jsx)(t.th,{children:"NLEVEL"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sc-1"}),(0,n.jsx)(t.td,{children:"Scorecards"}),(0,n.jsx)(t.td,{children:"/scorecards"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"10"}),(0,n.jsx)(t.td,{children:"1"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sc-2"}),(0,n.jsx)(t.td,{children:"Dashboard"}),(0,n.jsx)(t.td,{children:"/scorecards/dashboard"}),(0,n.jsx)(t.td,{children:"MOVVEND"}),(0,n.jsxs)(t.td,{children:["[msscorecards:","MOVVENDDEP","]"]}),(0,n.jsx)(t.td,{children:"2"}),(0,n.jsx)(t.td,{children:"3"}),(0,n.jsx)(t.td,{children:"2"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sc-3"}),(0,n.jsx)(t.td,{children:"Sellout by Items"}),(0,n.jsx)(t.td,{children:"/scorecards/articles"}),(0,n.jsx)(t.td,{children:"MOVVEND"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"4"}),(0,n.jsx)(t.td,{children:"5"}),(0,n.jsx)(t.td,{children:"2"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sc-4"}),(0,n.jsx)(t.td,{children:"Sellout by Department"}),(0,n.jsx)(t.td,{children:"/scorecards/departments"}),(0,n.jsx)(t.td,{children:"MOVVENDDEP"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"6"}),(0,n.jsx)(t.td,{children:"7"}),(0,n.jsx)(t.td,{children:"2"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sc-5"}),(0,n.jsx)(t.td,{children:"Sellout by Documents"}),(0,n.jsx)(t.td,{children:"/scorecards/documents"}),(0,n.jsx)(t.td,{children:"MOVVENDDOCTYPE"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"8"}),(0,n.jsx)(t.td,{children:"9"}),(0,n.jsx)(t.td,{children:"2"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["The field ",(0,n.jsx)(t.strong,{children:"COD_MENU"}),' is the unique key generated during the creation of a new menu item. It consists of a prefix (string) representing the name of the microservice and a progressive numerical suffix (for example, settings-3, users-1, etc.). The parameter "source" to be sent to the API calls is precisely the value of the COD_MENU field.']}),"\n",(0,n.jsx)(t.p,{children:'For example, to read the data contained in the MOVVENDDEP table, the source that should be sent to the APIs is "sc-4".'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"curl --location --request GET \"https://app.q01.io/api/v4/core/MOVVENDDEP?&source=sc-4&center_dett=visualizza&$count=true&$filter=equals(XMOVVEND06,'99999')\" \\\n--header 'Accept: application/json' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...''\n"})}),"\n",(0,n.jsx)(t.p,{children:"Even in the case of handling a POST or PUT request, the source must be sent and must be valid."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'curl --location --request \nPOST \'https://app.q01.io/api/v4/core/ART\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Accept: application/json\' \\\n--header \'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9........\' \\\n--header \'Content-Type: text/plain\' \\\n--data-raw \'[\n        {\n          "source": "settings-2",\n          "XART03": "1",\n          "counter": "XART03",\n          "XART04": "2000156333029",\n          "XART05": "2000156333029",\n          "XART20": "descr article"\n        }\n]\'\n'})}),"\n",(0,n.jsxs)(t.admonition,{type:"warning",children:[(0,n.jsx)(t.p,{children:"If a different source were sent, or if the indicated dimension in the route were incorrect, the system would return a 400 error."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'{\n  "status": 400,\n  "message": "Invalid DIM from provided source"\n}\n'})})]})]})}function p(e={}){const{wrapper:t}={...(0,s.M)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},2172:(e,t,i)=>{i.d(t,{I:()=>o,M:()=>a});var n=i(1504);const s={},r=n.createContext(s);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);