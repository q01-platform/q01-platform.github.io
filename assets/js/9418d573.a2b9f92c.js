"use strict";(self.webpackChunkq_01_docs=self.webpackChunkq_01_docs||[]).push([[5288],{6508:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=t(7624),r=t(2172);const i={sidebar_position:3,id:"map-core-api-core-components-query-data",title:"Query Data",sidebar_label:"Query Data"},a="Query Data",o={id:"products/map.q01.io/core-api/core-components/map-core-api-core-components-query-data",title:"Query Data",description:"To obtain data from a DIM, generally (except for particular cases), we use the GET method. It's possible to apply parameters (options or filters) to filter and organize the returned data.",source:"@site/docs/products/map.q01.io/core-api/core-components/query-data.md",sourceDirName:"products/map.q01.io/core-api/core-components",slug:"/products/map.q01.io/core-api/core-components/map-core-api-core-components-query-data",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-query-data",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"map-core-api-core-components-query-data",title:"Query Data",sidebar_label:"Query Data"},sidebar:"mapSidebar",previous:{title:"HTTP Request and Error Handling",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-http-request-composition"},next:{title:"Query Documents",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-query-document"}},d={},l=[{value:"Basic example",id:"basic-example",level:2},{value:"Request",id:"request",level:5},{value:"Response",id:"response",level:5},{value:"Limit of returned records",id:"limit-of-returned-records",level:2},{value:"Request",id:"request-1",level:5},{value:"Response",id:"response-1",level:5},{value:"Request",id:"request-2",level:5},{value:"Request",id:"request-3",level:5},{value:"Response",id:"response-2",level:5},{value:"Request for specific properties",id:"request-for-specific-properties",level:2},{value:"Request",id:"request-4",level:5},{value:"Response",id:"response-3",level:5},{value:"Request",id:"request-5",level:5},{value:"Response",id:"response-4",level:5},{value:"Filters",id:"filters",level:2},{value:"Standard operators",id:"standard-operators",level:3},{value:"Standard functions",id:"standard-functions",level:3},{value:"Special filters",id:"special-filters",level:3},{value:"Filter on TREC",id:"filter-on-trec",level:4},{value:"Orders",id:"orders",level:2},{value:"Groups",id:"groups",level:2},{value:"Metadata info",id:"metadata-info",level:2},{value:"Results Count",id:"results-count",level:3},{value:"Request",id:"request-6",level:5},{value:"Response",id:"response-5",level:5},{value:"Debug SQL",id:"debug-sql",level:3},{value:"Request",id:"request-7",level:5},{value:"Response",id:"response-6",level:5},{value:"Query on AC/VARS fields",id:"query-on-acvars-fields",level:2},{value:"Autocomplete field (AC)",id:"autocomplete-field-ac",level:3},{value:"Select option filed (VARS)",id:"select-option-filed-vars",level:3},{value:"Request",id:"request-8",level:5},{value:"Response",id:"response-7",level:5},{value:"Request",id:"request-9",level:5},{value:"Request",id:"request-10",level:5},{value:"Response",id:"response-8",level:5}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"query-data",children:"Query Data"}),"\n",(0,s.jsx)(n.p,{children:"To obtain data from a DIM, generally (except for particular cases), we use the GET method. It's possible to apply parameters (options or filters) to filter and organize the returned data."}),"\n",(0,s.jsx)(n.h2,{id:"basic-example",children:"Basic example"}),"\n",(0,s.jsx)(n.p,{children:"Core APIs offer various basic methods to obtain data from a DIM, useful for retrieving the details of a record, a list of records, or a document organized according to the structure of the metadata of the queried DIM."}),"\n",(0,s.jsx)(n.h5,{id:"request",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl \"https://app.q01.io/api/v4/core/BCODE?&source=settings-2&center_dett=visualizza\" \\\n--header 'Accept: application/json' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.....'\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n {\n  "BCODE_ID": 88933,\n  "OWNER": "SYS",\n  "CDATA": "20160413113008",\n  "LOWNER": "SYS",\n  "LDATA": "20170211190901",\n  "TIMESTAMP": "1460539808.768",\n  "TREC": "N",\n  "XBCODE01": "2",\n  "XBCODE02": "2",\n  "XBCODE03": "03000001",\n  "XBCODE04": "03000001",\n  "XBCODE05": 0,\n  "XBCODE06": "1",\n  "XBCODE07": "00",\n  "XBCODE08": "001",\n  "XBCODE09": "000000000000",\n  "XBCODE10": "03000001",\n  "XBCODE11": 1,\n  "XBCODE12": 0,\n  "XBCODE13": "",\n  "XBCODE14": ""\n }\n]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"limit-of-returned-records",children:"Limit of returned records"}),"\n",(0,s.jsxs)(n.p,{children:["By default, APIs return a maximum of 25 records per call if no arguments are passed. To obtain a certain number of records, or to manage pagination of results, you need to use the parameters ",(0,s.jsx)(n.code,{children:"$offset"})," and ",(0,s.jsx)(n.code,{children:"$num_rows"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.code,{children:"$num_rows"})," defines how many records we want to obtain in the response. The parameter ",(0,s.jsx)(n.code,{children:"$offset"})," indicates the initial record from which to start reading the result set of the query. If ",(0,s.jsx)(n.code,{children:"$offset"})," is set to 'all', then it's not necessary to pass the ",(0,s.jsx)(n.code,{children:"$num_rows"})," parameter, and the system will return the entire result set."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Using $offset=all is highly discouraged except for DIMs that have a limited number of records or when pagination cannot be used."})}),"\n",(0,s.jsxs)(n.p,{children:["The use of ",(0,s.jsx)(n.code,{children:"$num_rows"})," and ",(0,s.jsx)(n.code,{children:"$offset"}),", in the case of pagination of records, should be used together with the ",(0,s.jsx)(n.code,{children:"$order"})," parameter. To obtain the total number of records that the query could return (based also on the set filters), simply add the $count=true parameter."]}),"\n",(0,s.jsx)(n.p,{children:"Let's see some examples:"}),"\n",(0,s.jsx)(n.p,{children:"Limit the first 3 records read in the DB (without using the $order parameter, records are returned in the order assigned by the database)."}),"\n",(0,s.jsx)(n.h5,{id:"request-1",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/BCODE?$select=XBCODE03,XBCODE10&source=settings-2&center_dett=visualizza&$num_rows=3\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response-1",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[ \n    {\n        "BCODE_ID": 56,\n        "OWNER": "SYS",\n        "CDATA": "20160413113008",\n        "LOWNER": "SYS",\n        "LDATA": "20170211190901",\n        "TIMESTAMP": "1460539808.768",\n        "TREC": "N",\n        "XBCODE03": "03000001",\n        "XBCODE10": "ANA1408NA"\n    }, {\n        "BCODE_ID": 120,\n        "OWNER": "SYS",\n        "CDATA": "20160413113008",\n        "LOWNER": "SYS",\n        "LDATA": "20170211190901",\n        "TIMESTAMP": "1460539808.768",\n        "TREC": "N",\n        "XBCODE03": "03000002",\n        "XBCODE10": "ANA1408NA"\n    }, {\n        "BCODE_ID": 124,\n        "OWNER": "SYS",\n        "CDATA": "20160413113008",\n        "LOWNER": "SYS",\n        "LDATA": "20170211190901",\n        "TIMESTAMP": "1460539808.768",\n        "TREC": "N",\n        "XBCODE03": "03000003",\n        "XBCODE10": "ANA1408NA"\n    } \n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Pagination example to obtain twenty records at a time"}),"\n",(0,s.jsx)(n.h5,{id:"request-2",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/BCODE?source=settings-2&center_dett=visualizza&$select=XBCODE03,XBCODE10&$num_rows=20&$offset=0&$order=BCODE_ID\nGET https://app.q01.io/api/v4/core/BCODE?source=settings-2&center_dett=visualizza&$select=XBCODE03,XBCODE10&$num_rows=20&$offset=20&$order=BCODE_ID\nGET https://app.q01.io/api/v4/core/BCODE?source=settings-2&center_dett=visualizza&$select=XBCODE03,XBCODE10&$num_rows=20&$offset=40&$order=BCODE_ID\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example to obtain the total number of records (total count of records, limited to $num_rows records)"}),"\n",(0,s.jsx)(n.h5,{id:"request-3",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/BCODE?source=settings-2&center_dett=visualizza&$select=XBCODE03,XBCODE10&$count=true&$num_rows=3\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response-2",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "count": 42028,\n    "metadata": true\n  }\n  {\n    "BCODE_ID": 88936,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XBCODE03": "03000004",\n    "XBCODE10": "ANA1408NA"\n  },\n  {\n    "BCODE_ID": 88937,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XBCODE03": "03000005",\n    "XBCODE10": "ANA1408NA"\n  },\n  {\n    "BCODE_ID": 88938,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XBCODE03": "03000006",\n    "XBCODE10": "ANA1408NA"\n  }\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"These are some examples of how to interact with a DIM using the GET method, along with parameters for filtering, pagination, and obtaining total counts. Adjust the parameters according to your specific use case and requirements."}),"\n",(0,s.jsx)(n.h2,{id:"request-for-specific-properties",children:"Request for specific properties"}),"\n",(0,s.jsxs)(n.p,{children:["The properties of a dimension that are returned are based on the ",(0,s.jsx)(n.code,{children:"COD_ON_OFF"})," attribute associated with the metadata and the ",(0,s.jsx)(n.code,{children:"center_dett"})," sent during the request.\nBelow is the table describing the relationship between ",(0,s.jsx)(n.code,{children:"center_dett"})," and the content of ",(0,s.jsx)(n.code,{children:"COD_ON_OFF"}),"."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"center_dett"}),(0,s.jsx)(n.th,{children:"COD_ON_OFF"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"visualizza"}),(0,s.jsx)(n.td,{children:'The "L" must be present, for example D, N, M, L or L, R'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"dettaglio"}),(0,s.jsx)(n.td,{children:'The "D" must be present (D,N,M or D,L,R)'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"nuovo"}),(0,s.jsx)(n.td,{children:'The letter "R" must be present'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"edit"}),(0,s.jsx)(n.td,{children:'The letter "N" must be present'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"allviews"}),(0,s.jsx)(n.td,{children:"The content of COD_ON_OFF is ignored and all the properties of the registry are returned"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to obtain a subset of what the ",(0,s.jsx)(n.code,{children:"center_dett"})," would return, you can do so using the ",(0,s.jsx)(n.code,{children:"$select"})," parameter."]}),"\n",(0,s.jsx)(n.h5,{id:"request-4",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/ART?source=settings-2&center_dett=allviews&$select=XART03,XART20,XART25\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response-3",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "ART_ID": 1215,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XART03": "123456",\n    "XART20": "Spaghetti alla carbonara",\n    "XART25": 5.50,\n    "ART_ID": 1215,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XART03": "123558",\n    "XART20": "Pizza Margherita",\n    "XART25": 5.00,\n    ... \n    ... \n    ...\n  }\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you want to force the columns to be obtained (not in terms of weight but of ",(0,s.jsx)(n.code,{children:"center_dett"}),"), you can use the ",(0,s.jsx)(n.code,{children:"forceListCost"})," parameter.\nThe value is a list of constant codes separated by commas that bypass the ",(0,s.jsx)(n.code,{children:"center_dett"})," rules (which obviously no longer makes sense to pass as a parameter).\nTherefore, unlike the $select parameter which provides a subset of columns compared to those displayed (based on the ",(0,s.jsx)(n.code,{children:"center_dett"}),"), the ",(0,s.jsx)(n.code,{children:"forceListCost"})," returns only and exclusively the requested columns with additional metadata of the table (ID, OWNER, CDATA, LOWNER, LDATA, TIMESTAMP, TREC, AMB, and AMB_RIF)."]}),"\n",(0,s.jsx)(n.h5,{id:"request-5",children:"Request"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"center_dett"})," display would provide, by default, only the following constants: XART03, XART05, XART20. The response instead demonstrates that the obtained fields are those expressed in forceListCost."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/ART?source=settings-2&center_dett=visualizza&forceListCost=XART20,XART21\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response-4",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "ART_ID": 1215,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XART20": "Spaghetti alla carbonara",\n    "XART21": "IVA 10%"\n  },\n  {\n    "ART_ID": 1215,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XART20": "Pizza Margherita",\n    "XART21": "IVA 10%"\n  },\n  {\n    ...\n    ...\n  }\n]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"filters",children:"Filters"}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to filter the data using the ",(0,s.jsx)(n.code,{children:"$filter"})," parameter."]}),"\n",(0,s.jsx)(n.h3,{id:"standard-operators",children:"Standard operators"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Operators"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Comparison"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"eq"}),(0,s.jsx)(n.td,{children:"Equals"}),(0,s.jsx)(n.td,{children:"$filter=XLST10 eq 9.90"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ne"}),(0,s.jsx)(n.td,{children:"Not Equals"}),(0,s.jsx)(n.td,{children:"$filter=XLST10 ne 9.90"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"gt"}),(0,s.jsx)(n.td,{children:"Greater then"}),(0,s.jsx)(n.td,{children:"$filter=XLST10 gt 9.90"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ge"}),(0,s.jsx)(n.td,{children:"Greater then or equals"}),(0,s.jsx)(n.td,{children:"$filter=XLST10 ge 9.90"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"lt"}),(0,s.jsx)(n.td,{children:"Less then"}),(0,s.jsx)(n.td,{children:"$filter=XLST10 lt 9.90"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"le"}),(0,s.jsx)(n.td,{children:"Less then or equals"}),(0,s.jsx)(n.td,{children:"$filter=XLST10 le 9.90"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Logical Operators"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"and"}),(0,s.jsx)(n.td,{children:"logical AND"}),(0,s.jsx)(n.td,{children:"$filter=XLST10 gt 7.90 and XLST10 lt 10.90"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"or"}),(0,s.jsx)(n.td,{children:"logical OR"}),(0,s.jsx)(n.td,{children:"$filter=contains(XART20,'(kg)') or contains(XART20,'pizza')"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Grouping Operators"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"()"}),(0,s.jsx)(n.td,{children:"Grouping precedence"}),(0,s.jsx)(n.td,{children:"(contains(XART20,'pasta') or contains(XART20,'pizza')) and XLST10 ge 6.00"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"standard-functions",children:"Standard functions"}),"\n",(0,s.jsx)(n.p,{children:"The following query functions are supported."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Example"}),(0,s.jsx)(n.th,{children:"Sql"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"equals"}),(0,s.jsx)(n.td,{children:"$filter=equals(XART20,'(kg)')"}),(0,s.jsx)(n.td,{children:"$filter=XART20 = '(kg)'"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"notequals"}),(0,s.jsx)(n.td,{children:"$filter=notequals(XART20,'pizza')"}),(0,s.jsx)(n.td,{children:"$filter=XART20 != '(kg)'"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"contains"}),(0,s.jsx)(n.td,{children:"$filter=contains(XART20,'(kg)')"}),(0,s.jsx)(n.td,{children:"$filter=XART20 like '%(kg)%'"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"endswith"}),(0,s.jsx)(n.td,{children:"$filter=endswith(XART20,'pomodoro')"}),(0,s.jsx)(n.td,{children:'and XART20 like \'%pomodoro\' trova "pizza al pomodoro", "pasta al pomodoro" ecc...'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"startswith"}),(0,s.jsx)(n.td,{children:"$filter=startswith(XART20,'pasta')"}),(0,s.jsx)(n.td,{children:'and XART20 like \'pasta%\' trova "pasta e patate", "pasta e pesto" ecc...'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"in"}),(0,s.jsx)(n.td,{children:"$filter=in(XART06,'12,13,54')"}),(0,s.jsx)(n.td,{children:"and XART20 in(12,13,54)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"in_s"}),(0,s.jsx)(n.td,{children:"$filter=in_s(XART07,'134,abcd,AX23YE')"}),(0,s.jsx)(n.td,{children:"and XART20 in('123','ascd','AX23YE')"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"special-filters",children:"Special filters"}),"\n",(0,s.jsx)(n.h4,{id:"filter-on-trec",children:"Filter on TREC"}),"\n",(0,s.jsx)(n.p,{children:"The TREC field, present in each record, cannot be used like a normal field with standard filtering functions. This is because at the core API level, the condition on TREC is always automatically applied, disregarding logically deleted records:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"ifnull(TREC,'N') != 'C'\n"})}),"\n",(0,s.jsx)(n.p,{children:"So, even if we send the parameter $filter=(equals(TREC,'C') or equals(TREC,'N')) in an API call, it will be ANDed with the previous condition, effectively nullifying the OR:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"ifnull(TREC,'N') != 'C' and (TREC = 'C' OR TREC = 'N')\n"})}),"\n",(0,s.jsx)(n.p,{children:"To control the filter on the TREC column, it's necessary to use the query parameter cond_trec, bearing in mind that the value (or values separated by commas) will be used in the database query with NOT IN mode, and the default condition will not be applied (ifnull(TREC,'N') != 'C')."}),"\n",(0,s.jsx)(n.p,{children:"Below are some examples with their corresponding SQL conversion:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// Same behavior as the default condition, in fact, nothing changes.\nGET https://app.q01.io/api/v4/core/ART?source=settings-2&center_dett=visualizza&cond_trec=C\n\nand TREC not in('C')\n---\n\nGET https://app.q01.io/api/v4/core/ART?source=settings-2&center_dett=visualizza&cond_trec=S,A\n\nand TREC not in('S','C')\n---\n// In this way, we bypass the condition on TREC, effectively retrieving all the data present in the database.\nGET https://app.q01.io/api/v4/core/ART?source=settings-2&center_dett=visualizza&cond_trec=null\n\nand TREC not in('null')\n---\n"})}),"\n",(0,s.jsx)(n.h2,{id:"orders",children:"Orders"}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to define the sorting of the received data using the ",(0,s.jsx)(n.code,{children:"$order"})," parameter."]}),"\n",(0,s.jsx)(n.p,{children:"Of course, there is the possibility to define the type of sorting through the suffixes ASC or DESC."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/ART?source=settings-2&center_dett=visualizza&$select=XART03,XART20,XART25&$order=XART20 asc,XART03 desc\n"})}),"\n",(0,s.jsx)(n.h2,{id:"groups",children:"Groups"}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to define the grouping of the received data using the ",(0,s.jsx)(n.code,{children:"$group"})," parameter."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/BCODE?source=settings-2&center_dett=visualizza&$select=XBCODE10,XBCODE04,XART25&$group=XBCODE10\n"})}),"\n",(0,s.jsx)(n.h2,{id:"metadata-info",children:"Metadata info"}),"\n",(0,s.jsx)(n.p,{children:"The core APIs return as the first element of the returned data a JSON object containing information regarding the obtained results. The metadata object is structured as follows:"}),"\n",(0,s.jsx)(n.h3,{id:"results-count",children:"Results Count"}),"\n",(0,s.jsxs)(n.p,{children:['The first use of the metadata section is to provide us with the count of records that meet the set filter (or the total count of a dimension if no filters are set). As already mentioned in the "Limits of Returned Records" section, it is possible to obtain information about the returned data by sending the parameter ',(0,s.jsx)(n.code,{children:"$count=true"})," and then reading the response obtained in the metadata section."]}),"\n",(0,s.jsx)(n.h5,{id:"request-6",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/ART?source=settings-2&center_dett=allviews&$select=XART03,XART20,XART25&$count=true\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response-5",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'[\n  {\n    "metadata": true,\n    "count": 6785\n  },\n  {\n    "ART_ID": 1215,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XART03": "123456",\n    "XART20": "Spaghetti alla carbonara",\n    "XART25": 5.50,\n  },\n  {\n    "ART_ID": 1215,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XART03": "123558",\n    "XART20": "Pizza Margherita",\n    "XART25": 5.00,\n  },\n  {\n    ...\n    ...\n  }\n]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"debug-sql",children:"Debug SQL"}),"\n",(0,s.jsx)(n.p,{children:"It is possible to obtain the SQL generated by the core APIs by passing the debug parameter as true."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Please note"})," that when ",(0,s.jsx)(n.code,{children:"debug=true"})," is passed, the metadata element will be automatically added to the body."]}),"\n",(0,s.jsx)(n.h5,{id:"request-7",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/ART?source=settings-2&center_dett=allviews&$select=XART03,XART20,XART25&debug=true\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response-6",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "metadata": true,\n    "sql": "select SQL_CALC_FOUND_ROWS TB_ANAG_ART00.ART_ID, TB_ANAG_ART00.OWNER, TB_ANAG_ART00.CDATA, TB_ANAG_ART00.LOWNER, TB_ANAG_ART00.LDATA, TB_ANAG_ART00.TIMESTAMP, TB_ANAG_ART00.TREC,TB_ANAG_ART00.XART01, TB_ANAG_ART00.XART02, TB_ANAG_ART00.XART03, TB_ANAG_ART00.XART20, TB_ANAG_ART00.XART25 from TB_ANAG_ART00 where 1>0 and IFNULL(TB_ANAG_ART00.TREC,\'N\') not in(\'C\') AND (TB_ANAG_ART00.XART02 IN (\'2\') OR (TB_ANAG_ART00.XART01 = \'0\' AND TB_ANAG_ART00.XART02 = \'0\')) ORDER BY ART_ID DESC"\n  },\n  {\n    "ART_ID": 1215,\n    "OWNER": "SYS",\n    "CDATA": "20160413113008",\n    "LOWNER": "SYS",\n    "LDATA": "20170211190901",\n    "TIMESTAMP": "1460539808.768",\n    "TREC": "N",\n    "XART03": "123456",\n    "XART20": "Spaghetti alla carbonara",\n    "XART25": 5.50,\n  },\n  {\n    ...\n    ...\n  }\n]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"query-on-acvars-fields",children:"Query on AC/VARS fields"}),"\n",(0,s.jsx)(n.p,{children:"Particular attention is deserved by the field types AC and VARS."}),"\n",(0,s.jsx)(n.p,{children:"In both cases, they are foreign keys linked to the main dimension; the difference lies in their graphical representation."}),"\n",(0,s.jsx)(n.p,{children:"An example of AC or VARS is:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"User Registry (TB_ANAG_UT00)"}),"\n",(0,s.jsx)(n.p,{children:"Field XUT26 is the store code and refers to column XPV03 of table TB_ANAG_PV00"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Item Registry (TB_ANAG_ART00)"}),"\n",(0,s.jsx)(n.p,{children:"Field XART53 is the department code and refers to column XDEPFOOD03 of table TB_ANAG_DEPFOOD00"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"autocomplete-field-ac",children:"Autocomplete field (AC)"}),"\n",(0,s.jsx)(n.p,{children:"The field type AC allows activating a search on the destination table and bringing back the value contained in the code (specified in the metadata) into the column of the source table (defined precisely with field type AC).\nIt is used when the data in the destination table are many, or generally when it is useful to have a search to filter the data in the destination table."}),"\n",(0,s.jsx)(n.p,{children:"For example, it is advisable to use an AC to select the country to associate with a user, it is advisable to use an AC to select a loyalty card code to associate with a customer, etc."}),"\n",(0,s.jsx)(n.h3,{id:"select-option-filed-vars",children:"Select option filed (VARS)"}),"\n",(0,s.jsx)(n.p,{children:"The field type VARS allows displaying an already expanded list of data coming from another dimension and reporting the code related to the values shown in the source table.\nIt is used when the data in the destination table are of limited number and there is no need to filter the data to be displayed."}),"\n",(0,s.jsx)(n.p,{children:"For example, it is advisable to use a VARS to display the genre of a movie, or the selection of the VAT code on a product, etc."}),"\n",(0,s.jsx)(n.p,{children:"To query the core APIs and obtain the correct information regarding the field types AC or VARS, you must use the following endpoint."}),"\n",(0,s.jsx)(n.p,{children:"In addition to the mandatory source, the endpoint also requires the field parameter, which represents the code of the field in the source table of type AC or VARS.\nIn the case of VARS fields, it is not necessary to send any additional information to the server; it will respond with the list of data that can be attached to the source field (in our example to XART11)."}),"\n",(0,s.jsx)(n.h5,{id:"request-8",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/vars?source=settings-2&field=XART11\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response-7",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "XCL103": "003",\n    "XCL104": "Accessori"\n  },\n  {\n    "XCL103": "002",\n    "XCL104": "Magl.vis.cot.fil.fan"\n  },\n  {\n    "XCL103": "001",\n    "XCL104": "Magl.merinf.p.stoffa"\n  },\n  ...\n  ...\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the case where the same field is of type AC and not VARS, you need to consider the following:"}),"\n",(0,s.jsx)(n.p,{children:"The request"}),"\n",(0,s.jsx)(n.h5,{id:"request-9",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/vars?source=settings-2&field=XART11\n"})}),"\n",(0,s.jsx)(n.p,{children:"would produce an empty response because AC requires a filter to be set."}),"\n",(0,s.jsx)(n.h5,{id:"request-10",children:"Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GET https://app.q01.io/api/v4/core/vars?source=settings-2&field=XART11&$filter=startwith(XCL104,'Magl')\n"})}),"\n",(0,s.jsx)(n.h5,{id:"response-8",children:"Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "XCL103": "002",\n    "XCL104": "Magl.vis.cot.fil.fan"\n  },\n  {\n    "XCL103": "001",\n    "XCL104": "Magl.merinf.p.stoffa"\n  }\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"However, it is possible to omit the filter by passing the parameter getACList=1, which effectively allows us to handle a field of type AC similarly to a VARS."}),"\n",(0,s.jsx)(n.p,{children:"This option is useful in cases where it is necessary, on the graphical interface side, to manipulate the data that make up the AC field. For example, rendering the obtained data in a customized way (rows of different colors based on the first letter of the alphabet with which the description begins, etc.)."})]})}function h(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>o,M:()=>a});var s=t(1504);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);