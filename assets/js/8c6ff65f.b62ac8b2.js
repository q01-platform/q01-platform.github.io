"use strict";(self.webpackChunkq_01_docs=self.webpackChunkq_01_docs||[]).push([[2456],{3524:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var t=r(7624),n=r(2172);const o={sidebar_position:2,id:"map-core-api-core-components-http-request-composition",title:"Composition of HTTP Request and Error Handling",sidebar_label:"HTTP Request and Error Handling"},i="Composition of HTTP Request and Error Handling",d={id:"products/map.q01.io/core-api/core-components/map-core-api-core-components-http-request-composition",title:"Composition of HTTP Request and Error Handling",description:"Platform Api URL",source:"@site/docs/products/map.q01.io/core-api/core-components/http-request-composition.md",sourceDirName:"products/map.q01.io/core-api/core-components",slug:"/products/map.q01.io/core-api/core-components/map-core-api-core-components-http-request-composition",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-http-request-composition",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"map-core-api-core-components-http-request-composition",title:"Composition of HTTP Request and Error Handling",sidebar_label:"HTTP Request and Error Handling"},sidebar:"mapSidebar",previous:{title:"Validation Rules",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-validation-rules"},next:{title:"Query Data",permalink:"/docs/products/map.q01.io/core-api/core-components/map-core-api-core-components-query-data"}},c={},l=[{value:"Platform Api URL",id:"platform-api-url",level:2},{value:"HTTP methods",id:"http-methods",level:2},{value:"HTTP headers",id:"http-headers",level:2},{value:"Custom headers",id:"custom-headers",level:3},{value:"Status Code",id:"status-code",level:2},{value:"Errors response",id:"errors-response",level:2}];function a(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"composition-of-http-request-and-error-handling",children:"Composition of HTTP Request and Error Handling"}),"\n",(0,t.jsx)(s.h2,{id:"platform-api-url",children:"Platform Api URL"}),"\n",(0,t.jsx)(s.p,{children:"To access the Platform APIs, it is necessary to compose a URL using the following parts:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Part"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Protocol"}),(0,t.jsx)(s.td,{children:"https://"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Base Url"}),(0,t.jsx)(s.td,{children:"cluster domain"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Web Api path"}),(0,t.jsx)(s.td,{children:'fixed to "/api"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Version"}),(0,t.jsx)(s.td,{children:"api Version (actually v4)"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Service name"}),(0,t.jsx)(s.td,{children:"the name of the service to invoke. Generally, it's the name of a microservice (/settings, /scorecards, /users, etc...) or /core in case you want to point to the CoreService."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Resource / Route"}),(0,t.jsx)(s.td,{children:"the last part of the URL contains the resource to query (exceptions will be shown below for constructing a valid URL based on the type of data to retrieve)."})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"The URL to use will therefore be composed of the parts: Protocol + Base URL + Web API path + Version + Service name + Resource/Route."}),"\n",(0,t.jsx)(s.h2,{id:"http-methods",children:"HTTP methods"}),"\n",(0,t.jsx)(s.p,{children:"HTTP requests can use different methods. The Platform APIs only use the following methods:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Method"}),(0,t.jsx)(s.th,{children:"Scope"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"GET"}),(0,t.jsx)(s.td,{children:"Used to retrieve"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"POST"}),(0,t.jsx)(s.td,{children:"Used to insert new records into an entity. It supports bulk inserts (in transaction) and returns 201 upon successful insertion."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PUT"}),(0,t.jsx)(s.td,{children:"Used for modifying a record. The PUT method is used for both full and partial modification of a record; therefore, the PATCH method is not used. It returns 200 upon successful update."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DELETE"}),(0,t.jsx)(s.td,{children:"Used for deleting a record from an entity. It returns 205 upon successful deletion."})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"http-headers",children:"HTTP headers"}),"\n",(0,t.jsx)(s.p,{children:"The Platform APIs only support JSON as a format."}),"\n",(0,t.jsx)(s.p,{children:"Therefore, every request must include the headers Accept and Content-Type with the value application/json, even if sending the body is not required. The errors returned by the APIs are in JSON format."}),"\n",(0,t.jsx)(s.p,{children:"Even if the code were to work without modifying the headers, it is recommended as a best practice to add the following values to the headers, especially if we are sending JSON (the content-type must be application/json)."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Accept: application/json\nContent-Type: application/json\nmicroservice: mssettings\n"})}),"\n",(0,t.jsx)(s.h3,{id:"custom-headers",children:"Custom headers"}),"\n",(0,t.jsx)(s.p,{children:"Adding parameters in the headers is also used for other purposes."}),"\n",(0,t.jsx)(s.p,{children:"For example, it's possible to use the canary version (if available) of a microservice by including in the headers:"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"canary-mode: on"})}),"\n",(0,t.jsx)(s.p,{children:"Similarly, it's possible to use the developer key to point to a Skaffold instance of a microservice (when we want to share development with the team) by including:"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"developer: peter"})}),"\n",(0,t.jsx)(s.h2,{id:"status-code",children:"Status Code"}),"\n",(0,t.jsx)(s.p,{children:"Whether an HTTP call succeeds or fails, the response will include its status code. The status codes include the following codes:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Code"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Type"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"200 OK"}),(0,t.jsx)(s.td,{children:"When the operation is successful"}),(0,t.jsx)(s.td,{children:"Success"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"201 Created"}),(0,t.jsx)(s.td,{children:"When the POST creation is successful"}),(0,t.jsx)(s.td,{children:"Success"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"204 No Content"}),(0,t.jsx)(s.td,{children:"When the operation is successful but nothing is returned"}),(0,t.jsx)(s.td,{children:"Success"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"403 Forbidden"}),(0,t.jsxs)(s.td,{children:["The following errors are returned: ",(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Access Denied"}),(0,t.jsx)("li",{children:"Invalid Access Rights"})]})]}),(0,t.jsx)(s.td,{children:"Client Error"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"401 Unauthorized"}),(0,t.jsxs)(s.td,{children:["The following errors are returned: ",(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Bad Auth"}),(0,t.jsx)("li",{children:"Expired Auth Token"}),(0,t.jsx)("li",{children:"Invalid Auth Token"}),(0,t.jsx)("li",{children:"Invalid User"}),(0,t.jsx)("li",{children:"Missing Token"}),(0,t.jsx)("li",{children:"Unauthorized Access"})]})]}),(0,t.jsx)(s.td,{children:"Client Error"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"400 BadRequest"}),(0,t.jsx)(s.td,{children:"When an invalid argument is sent"}),(0,t.jsx)(s.td,{children:"Client Error"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"404 Not Found"}),(0,t.jsx)(s.td,{children:"Resource does not exists"}),(0,t.jsx)(s.td,{children:"Client Error"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"405 Method Not Allowed"}),(0,t.jsx)(s.td,{children:"When the method used is not valid:"}),(0,t.jsx)(s.td,{children:"Client Error"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"500 BadRequest"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"501 Not Implemented"}),(0,t.jsx)(s.td,{children:"When the resource exists but is not implemented:"}),(0,t.jsx)(s.td,{children:"Server Error"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"503 Service Unavailable"}),(0,t.jsx)(s.td,{children:"Ehwn the request service is not available"}),(0,t.jsx)(s.td,{children:"Server Error"})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"errors-response",children:"Errors response"}),"\n",(0,t.jsx)(s.p,{children:'The error messages returned are in JSON format. They always contain the keys "code" (or "status") and "message".'}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'{\n  "code": 401,\n  "message": "Invalid token provided!",\n  "data": [],\n  "errors": {\n    "token": [\n      0: "validation failed!"\n    ], ...\n  }\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"In the case where the call goes through multiple microservices (for example, the client invokes the backend of a microservice which in turn calls the core service and then the core query/write APIs), the responses are nested, for example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'{\n  "code": 400,\n  "message": {\n    "code": 400,\n    "message": {\n        "status": 400,\n        "message": "Invalid",\n        "data": [],\n        "errors": {\n        } \n    },\n    "data": [],\n    "errors": {}\n  },\n  "data": [],\n  "errors": {}\n  "username": [\n    0: "Invalid length, min chars 6",\n    1: "The username should contain uppercase letter, numbers and a symbol"\n  ],\n  "password": [\n    "0": "password must be at least 8 chars!"\n  ]\n}\n'})})]})}function h(e={}){const{wrapper:s}={...(0,n.M)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},2172:(e,s,r)=>{r.d(s,{I:()=>d,M:()=>i});var t=r(1504);const n={},o=t.createContext(n);function i(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);